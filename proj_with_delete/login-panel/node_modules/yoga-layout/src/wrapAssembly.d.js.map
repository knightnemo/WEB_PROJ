{"version":3,"file":"wrapAssembly.d.js","names":[],"sources":["wrapAssembly.d.ts"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport type {\n  Align,\n  Direction,\n  Display,\n  Edge,\n  Errata,\n  ExperimentalFeature,\n  FlexDirection,\n  Gutter,\n  Justify,\n  MeasureMode,\n  Overflow,\n  PositionType,\n  Unit,\n  Wrap,\n} from './generated/YGEnums';\n\nimport YGEnums from './generated/YGEnums';\n\ntype Layout = {\n  left: number;\n  right: number;\n  top: number;\n  bottom: number;\n  width: number;\n  height: number;\n};\n\ntype Size = {\n  width: number;\n  height: number;\n};\n\ntype Value = {\n  unit: Unit;\n  value: number;\n};\n\nexport type Config = {\n  free(): void;\n  isExperimentalFeatureEnabled(feature: ExperimentalFeature): boolean;\n  setExperimentalFeatureEnabled(\n    feature: ExperimentalFeature,\n    enabled: boolean,\n  ): void;\n  setPointScaleFactor(factor: number): void;\n  /**\n   * @deprecated Please use \"getErrata()\"\n   */\n  useLegacyStretchBehaviour(): boolean;\n  /**\n   * @deprecated \"setUseLegacyStretchBehaviour\" will be removed in the next\n   * release. Usage should be replaced with \"setErrata(ERRATA_ALL)\" to opt out\n   * of all future breaking conformance fixes, or\n   * \"setErrata(ERRATA_STRETCH_FLEX_BASIS)\" to opt out of the specific\n   * conformance fix previously disabled by \"UseLegacyStretchBehaviour\".\n   */\n  setUseLegacyStretchBehaviour(useLegacyStretchBehaviour: boolean): void;\n  getErrata(): Errata;\n  setErrata(errata: Errata): void;\n  useWebDefaults(): boolean;\n  setUseWebDefaults(useWebDefaults: boolean): void;\n};\n\nexport type DirtiedFunction = (node: Node) => void;\n\nexport type MeasureFunction = (\n  width: number,\n  widthMode: MeasureMode,\n  height: number,\n  heightMode: MeasureMode,\n) => Size;\n\nexport type Node = {\n  calculateLayout(width?: number, height?: number, direction?: Direction): void;\n  copyStyle(node: Node): void;\n  free(): void;\n  freeRecursive(): void;\n  getAlignContent(): Align;\n  getAlignItems(): Align;\n  getAlignSelf(): Align;\n  getAspectRatio(): number;\n  getBorder(edge: Edge): number;\n  getChild(index: number): Node;\n  getChildCount(): number;\n  getComputedBorder(edge: Edge): number;\n  getComputedBottom(): number;\n  getComputedHeight(): number;\n  getComputedLayout(): Layout;\n  getComputedLeft(): number;\n  getComputedMargin(edge: Edge): number;\n  getComputedPadding(edge: Edge): number;\n  getComputedRight(): number;\n  getComputedTop(): number;\n  getComputedWidth(): number;\n  getDisplay(): Display;\n  getFlexBasis(): Value;\n  getFlexDirection(): FlexDirection;\n  getFlexGrow(): number;\n  getFlexShrink(): number;\n  getFlexWrap(): Wrap;\n  getHeight(): Value;\n  getJustifyContent(): Justify;\n  getGap(gutter: Gutter): Value;\n  getMargin(edge: Edge): Value;\n  getMaxHeight(): Value;\n  getMaxWidth(): Value;\n  getMinHeight(): Value;\n  getMinWidth(): Value;\n  getOverflow(): Overflow;\n  getPadding(edge: Edge): Value;\n  getParent(): Node | null;\n  getPosition(edge: Edge): Value;\n  getPositionType(): PositionType;\n  getWidth(): Value;\n  insertChild(child: Node, index: number): void;\n  isDirty(): boolean;\n  isReferenceBaseline(): boolean;\n  markDirty(): void;\n  removeChild(child: Node): void;\n  reset(): void;\n  setAlignContent(alignContent: Align): void;\n  setAlignItems(alignItems: Align): void;\n  setAlignSelf(alignSelf: Align): void;\n  setAspectRatio(aspectRatio: number): void;\n  setBorder(edge: Edge, borderWidth: number): void;\n  setDisplay(display: Display): void;\n  setFlex(flex: number): void;\n  setFlexBasis(flexBasis: number | 'auto' | `${number}%`): void;\n  setFlexBasisPercent(flexBasis: number): void;\n  setFlexBasisAuto(): void;\n  setFlexDirection(flexDirection: FlexDirection): void;\n  setFlexGrow(flexGrow: number): void;\n  setFlexShrink(flexShrink: number): void;\n  setFlexWrap(flexWrap: Wrap): void;\n  setHeight(height: number | 'auto' | `${number}%`): void;\n  setIsReferenceBaseline(isReferenceBaseline: boolean): void;\n  setHeightAuto(): void;\n  setHeightPercent(height: number): void;\n  setJustifyContent(justifyContent: Justify): void;\n  setGap(gutter: Gutter, gapLength: number): Value;\n  setMargin(edge: Edge, margin: number | 'auto' | `${number}%`): void;\n  setMarginAuto(edge: Edge): void;\n  setMarginPercent(edge: Edge, margin: number): void;\n  setMaxHeight(maxHeight: number | `${number}%`): void;\n  setMaxHeightPercent(maxHeight: number): void;\n  setMaxWidth(maxWidth: number | `${number}%`): void;\n  setMaxWidthPercent(maxWidth: number): void;\n  setDirtiedFunc(dirtiedFunc: DirtiedFunction | null): void;\n  setMeasureFunc(measureFunc: MeasureFunction | null): void;\n  setMinHeight(minHeight: number | `${number}%`): void;\n  setMinHeightPercent(minHeight: number): void;\n  setMinWidth(minWidth: number | `${number}%`): void;\n  setMinWidthPercent(minWidth: number): void;\n  setOverflow(overflow: Overflow): void;\n  setPadding(edge: Edge, padding: number | `${number}%`): void;\n  setPaddingPercent(edge: Edge, padding: number): void;\n  setPosition(edge: Edge, position: number | `${number}%`): void;\n  setPositionPercent(edge: Edge, position: number): void;\n  setPositionType(positionType: PositionType): void;\n  setWidth(width: number | 'auto' | `${number}%`): void;\n  setWidthAuto(): void;\n  setWidthPercent(width: number): void;\n  unsetDirtiedFunc(): void;\n  unsetMeasureFunc(): void;\n};\n\nexport type Yoga = {\n  Config: {\n    create(): Config;\n    destroy(config: Config): void;\n  };\n  Node: {\n    create(config?: Config): Node;\n    createDefault(): Node;\n    createWithConfig(config: Config): Node;\n    destroy(node: Node): void;\n  };\n} & typeof YGEnums;\n\ndeclare const wrapAsm: (assembly: unknown) => Yoga;\nexport default wrapAsm;\n"],"mappings":""}