#!/usr/bin/env node
"use strict";
// This file requires a shebang above. If it is missing, this is an error.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const commander_1 = __importDefault(require("commander"));
const listr2_1 = require("listr2");
require("./util/terminate");
const check_system_1 = require("./util/check-system");
// eslint-disable-next-line @typescript-eslint/no-var-requires
const metadata = require('../package.json');
const originalSC = commander_1.default.executeSubCommand.bind(commander_1.default);
commander_1.default.executeSubCommand = (argv, args, unknown) => {
    let indexOfDoubleDash = process.argv.indexOf('--');
    indexOfDoubleDash = indexOfDoubleDash < 0 ? process.argv.length + 1 : indexOfDoubleDash;
    const passThroughArgs = args.filter((arg) => process.argv.indexOf(arg) > indexOfDoubleDash);
    const normalArgs = args.filter((arg) => process.argv.indexOf(arg) <= indexOfDoubleDash);
    let newArgs = args;
    let newUnknown = unknown;
    if (passThroughArgs.length > 0) {
        newArgs = normalArgs.concat(unknown).concat('--').concat(passThroughArgs);
        newUnknown = [];
    }
    return originalSC(argv, newArgs, newUnknown);
};
commander_1.default
    .version(metadata.version)
    .option('--verbose', 'Enables verbose mode')
    .command('init', 'Initialize a new Electron application')
    .command('import', 'Attempts to navigate you through the process of importing an existing project to "electron-forge"')
    .command('start', 'Start the current Electron application in development mode')
    .command('package', 'Package the current Electron application')
    .command('make', 'Generate distributables for the current Electron application')
    .command('publish', 'Publish the current Electron application')
    .on('command:*', (commands) => {
    if (!commander_1.default._execs.has(commands[0])) {
        console.error();
        console.error(chalk_1.default.red(`Unknown command "${commander_1.default.args.join(' ')}".`));
        console.error('See --help for a list of available commands.');
        process.exit(1);
    }
});
(async () => {
    const runner = new listr2_1.Listr([
        {
            title: 'Checking your system',
            task: async (_, task) => {
                return await (0, check_system_1.checkSystem)(task);
            },
        },
    ], {
        concurrent: false,
        exitOnError: false,
    });
    await runner.run();
    if (runner.err.length) {
        console.error(chalk_1.default.red(`\nIt looks like you are missing some dependencies you need to get Electron running.
Make sure you have git installed and Node.js version ${metadata.engines.node}`));
        process.exit(1);
    }
    commander_1.default.parse(process.argv);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlY3Ryb24tZm9yZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZWxlY3Ryb24tZm9yZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSwwRUFBMEU7Ozs7O0FBRTFFLGtEQUEwQjtBQUMxQiwwREFBZ0M7QUFDaEMsbUNBQStCO0FBRS9CLDRCQUEwQjtBQUUxQixzREFBa0Q7QUFFbEQsOERBQThEO0FBQzlELE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBRTVDLE1BQU0sVUFBVSxHQUFHLG1CQUFPLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLG1CQUFPLENBQUMsQ0FBQztBQUMzRCxtQkFBTyxDQUFDLGlCQUFpQixHQUFHLENBQUMsSUFBYyxFQUFFLElBQWMsRUFBRSxPQUFpQixFQUFFLEVBQUU7SUFDaEYsSUFBSSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuRCxpQkFBaUIsR0FBRyxpQkFBaUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUM7SUFFeEYsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsaUJBQWlCLENBQUMsQ0FBQztJQUM1RixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxDQUFDO0lBRXhGLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQztJQUNuQixJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUM7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