"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const core_utils_1 = require("@electron-forge/core-utils");
const debug_1 = __importDefault(require("debug"));
const listr2_1 = require("listr2");
const semver_1 = __importDefault(require("semver"));
const install_dependencies_1 = __importStar(require("../util/install-dependencies"));
const read_package_json_1 = require("../util/read-package-json");
const find_template_1 = require("./init-scripts/find-template");
const init_directory_1 = require("./init-scripts/init-directory");
const init_git_1 = require("./init-scripts/init-git");
const init_link_1 = require("./init-scripts/init-link");
const init_npm_1 = require("./init-scripts/init-npm");
const d = (0, debug_1.default)('electron-forge:init');
async function validateTemplate(template, templateModule) {
    if (!templateModule.requiredForgeVersion) {
        throw new Error(`Cannot use a template (${template}) with this version of Electron Forge, as it does not specify its required Forge version.`);
    }
    const forgeVersion = (await (0, read_package_json_1.readRawPackageJson)(path_1.default.join(__dirname, '..', '..'))).version;
    if (!semver_1.default.satisfies(forgeVersion, templateModule.requiredForgeVersion)) {
        throw new Error(`Template (${template}) is not compatible with this version of Electron Forge (${forgeVersion}), it requires ${templateModule.requiredForgeVersion}`);
    }
}
exports.default = async ({ dir = process.cwd(), interactive = false, copyCIFiles = false, force = false, template = 'base' }) => {
    d(`Initializing in: ${dir}`);
    const packageManager = (0, core_utils_1.safeYarnOrNpm)();
    const runner = new listr2_1.Listr([
        {
            title: `Locating custom template: "${template}"`,
            task: async (ctx) => {
                ctx.templateModule = await (0, find_template_1.findTemplate)(dir, template);
            },
        },
        {
            title: 'Initializing directory',
            task: async (_, task) => {
                await (0, init_directory_1.initDirectory)(dir, task, force);
                await (0, init_git_1.initGit)(dir);
            },
            options: {
                persistentOutput: true,
            },
        },
        {
            title: 'Preparing template',
            task: async ({ templateModule }) => {
                await validateTemplate(template, templateModule);
            },
        },
        {
            title: 'Initializing template',
            task: async ({ templateModule }, task) => {
                if (typeof templateModule.initializeTemplate === 'function') {
                    const tasks = await templateModule.initializeTemplate(dir, { copyCIFiles });
                    if (tasks) {
                        return task.newListr(tasks, { concurrent: false });
                    }
                }
            },
        },
        {
            title: 'Installing template dependencies',
            task: async ({ templateModule }, task) => {
                return task.newListr([
                    {
                        title: 'Installing production dependencies',
                        task: async (_, task) => {
                            var _a;
                            d('installing dependencies');
                            if ((_a = templateModule.dependencies) === null || _a === void 0 ? void 0 : _a.length) {
                                task.output = `${packageManager} install ${templateModule.dependencies.join(' ')}`;
                            }
                            return await (0, install_dependencies_1.default)(dir, templateModule.dependencies || [], install_dependencies_1.DepType.PROD, install_dependencies_1.DepVersionRestriction.RANGE);
                        },
                        exitOnError: false,
                    },
                    {
                        title: 'Installing development dependencies',
                        task: async (_, task) => {
                            var _a;
                            d('installing devDependencies');
                            if ((_a = templateModule.devDependencies) === null || _a === void 0 ? void 0 : _a.length) {
                                task.output = `${packageManager} install --dev ${templateModule.devDependencies.join(' ')}`;
                            }
                            await (0, install_dependencies_1.default)(dir, templateModule.devDependencies || [], install_dependencies_1.DepType.DEV);
                        },
                        exitOnError: false,
                    },
                    {
                        title: 'Finalizing dependencies',
                        task: async (_, task) => {
                            return task.newListr([
                                {
                                    title: 'Installing common dependencies',
                                    task: async (_, task) => {
                                        await (0, init_npm_1.initNPM)(dir, task);
                                    },
                                    exitOnError: false,
                                },
                                {
                                    title: process.env.LINK_FORGE_DEPENDENCIES_ON_INIT ? 'Linking forge dependencies' : 'Skip linking forge dependencies',
                                    task: async (_, task) => {
                                        await (0, init_link_1.initLink)(dir, task);
                                    },
                                    exitOnError: true,
                                },
                            ]);
                        },
                    },
                ], {
                    concurrent: false,
                });
            },
        },
    ], {
        concurrent: false,
        rendererSilent: !interactive,
        rendererFallback: Boolean(process.env.DEBUG),
    });
    await runner.run();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvaW5pdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsZ0RBQXdCO0FBRXhCLDJEQUEyRDtBQUUzRCxrREFBMEI7QUFDMUIsbUNBQStCO0FBQy9CLG9EQUE0QjtBQUU1QixxRkFBOEY7QUFDOUYsaUVBQStEO0FBRS9ELGdFQUE0RDtBQUM1RCxrRUFBOEQ7QUFDOUQsc0RBQWtEO0FBQ2xELHdEQUFvRDtBQUNwRCxzREFBa0Q7QUFFbEQsTUFBTSxDQUFDLEdBQUcsSUFBQSxlQUFLLEVBQUMscUJBQXFCLENBQUMsQ0FBQztBQXlCdkMsS0FBSyxVQUFVLGdCQUFnQixDQUFDLFFBQWdCLEVBQUUsY0FBNkI7SUFDN0UsSUFBSSxDQUFDLGNBQWMsQ0FBQyxvQkFBb0IsRUFBRTtRQUN4QyxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixRQUFRLDJGQUEyRixDQUFDLENBQUM7S0FDaEo7SUFFRCxNQUFNLFlBQVksR0FBRyxDQUFDLE1BQU0sSUFBQSxzQ0FBa0IsRUFBQyxjQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUMxRixJQUFJLENBQUMsZ0JBQU0sQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLGNBQWMsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFO1FBQ3hFLE1BQU0sSUFBSSxLQUFLLENBQ2IsYUFBYSxRQUFRLDREQUE0RCxZQUFZLGtCQUFrQixjQUFjLENBQUMsb0JBQW9CLEVBQUUsQ0FDckosQ0FBQztLQUNIO0FBQ0gsQ0FBQztBQUVELGtCQUFlLEtBQUssRUFBRSxFQUFFLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsV0FBVyxHQUFHLEtBQUssRUFBRSxXQUFXLEdBQUcsS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFL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