"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const debug_1 = __importDefault(require("debug"));
const html_webpack_plugin_1 = __importDefault(require("html-webpack-plugin"));
const webpack_1 = __importDefault(require("webpack"));
const webpack_merge_1 = require("webpack-merge");
const AssetRelocatorPatch_1 = __importDefault(require("./util/AssetRelocatorPatch"));
const processConfig_1 = __importDefault(require("./util/processConfig"));
const rendererTypeUtils_1 = require("./util/rendererTypeUtils");
const d = (0, debug_1.default)('electron-forge:plugin:webpack:webpackconfig');
var RendererTarget;
(function (RendererTarget) {
    RendererTarget[RendererTarget["Web"] = 0] = "Web";
    RendererTarget[RendererTarget["ElectronRenderer"] = 1] = "ElectronRenderer";
    RendererTarget[RendererTarget["ElectronPreload"] = 2] = "ElectronPreload";
    RendererTarget[RendererTarget["SandboxedPreload"] = 3] = "SandboxedPreload";
})(RendererTarget || (RendererTarget = {}));
var WebpackTarget;
(function (WebpackTarget) {
    WebpackTarget["Web"] = "web";
    WebpackTarget["ElectronPreload"] = "electron-preload";
    WebpackTarget["ElectronRenderer"] = "electron-renderer";
})(WebpackTarget || (WebpackTarget = {}));
function isNotNull(item) {
    return item !== null;
}
function rendererTargetToWebpackTarget(target) {
    switch (target) {
        case RendererTarget.Web:
        case RendererTarget.SandboxedPreload:
            return WebpackTarget.Web;
        case RendererTarget.ElectronPreload:
            return WebpackTarget.ElectronPreload;
        case RendererTarget.ElectronRenderer:
            return WebpackTarget.ElectronRenderer;
    }
}
class WebpackConfigGenerator {
    constructor(pluginConfig, projectDir, isProd, port) {
        // Users can override this method in a subclass to provide custom logic or
        // configuration parameters.
        this.preprocessConfig = async (config) => config({}, {
            mode: this.mode,
        });
        this.pluginConfig = pluginConfig;
        this.projectDir = projectDir;
        this.webpackDir = path_1.default.resolve(projectDir, '.webpack');
        this.isProd = isProd;
        this.port = port;
        d('Config mode:', this.mode);
    }
    async resolveConfig(config) {
        const rawConfig = typeof config === 'string'
            ? // eslint-disable-next-line @typescript-eslint/no-var-requires
                require(path_1.default.resolve(this.projectDir, config))
            : config;
        return (0, processConfig_1.default)(this.preprocessConfig, rawConfig);
    }
    get mode() {
        return this.isProd ? 'production' : 'development';
    }
    get rendererSourceMapOption() {
        return this.isProd ? 'source-map' : 'eval-source-map';
    }
    rendererEntryPoint(entryPoint, inRendererDir, basename) {
        if (this.isProd) {
            return `\`file://$\{require('path').resolve(__dirname, '..', '${inRendererDir ? 'renderer' : '.'}', '${entryPoint.name}', '${basename}')}\``;
        }
        const baseUrl = `http://localhost:${this.port}/${entryPoint.name}`;
        if (basename !== 'index.html') {
            return `'${baseUrl}/${basename}'`;
        }
        return `'${baseUrl}'`;
    }
    toEnvironmentVariable(entryPoint, preload = false) {
        const suffix = preload ? '_PRELOAD_WEBPACK_ENTRY' : '_WEBPACK_ENTRY';
        return `${entryPoint.name.toUpperCase().replace(/ /g, '_')}${suffix}`;
    }
    getPreloadDefine(entryPoint) {
        if (!(0, rendererTypeUtils_1.isNoWindow)(entryPoint)) {
            if (this.isProd) {
                return `require('path').resolve(__dirname, '../renderer', '${entryPoint.name}', 'preload.js')`;
            }
            return `'${path_1.default.resolve(this.webpackDir, 'renderer', entryPoint.name, 'preload.js').replace(/\\/g, '\\\\')}'`;
        }
        else {
            // If this entry-point has no configured preload script just map this constant to `undefined`
            // so that any code using it still works.  This makes quick-start / docs simpler.
            return 'undefined';
        }
    }
    getDefines(inRendererDir = true) {
        const defines = {};
        if (!this.pluginConfig.renderer.entryPoints || !Array.isArray(this.pluginConfig.renderer.entryPoints)) {
            throw new Error('Required config option "renderer.entryPoints" has not been defined');
        }
        for (const entryPoint of this.pluginConfig.renderer.entryPoints) {
            const entryKey = this.toEnvironmentVariable(entryPoint);
            if ((0, rendererTypeUtils_1.isLocalWindow)(entryPoint)) {
                defines[entryKey] = this.rendererEntryPoint(entryPoint, inRendererDir, 'index.html');
            }
            else {
                defines[entryKey] = this.rendererEntryPoint(entryPoint, inRendererDir, 'index.js');
            }
            defines[`process.env.${entryKey}`] = defines[entryKey];
            const preloadDefineKey = this.toEnvironmentVariable(entryPoint, true);
            defines[preloadDefineKey] = this.getPreloadDefine(entryPoint);
            defines[`process.env.${preloadDefineKey}`] = defines[preloadDefineKey];
        }
        return defines;
    }
    async getMainConfig() {
        const mainConfig = await this.resolveConfig(this.pluginConfig.mainConfig);
        if (!mainConfig.entry) {
            throw new Error('Required option "mainConfig.entry" has not been defined');
        }
        const fix = (item) => {
            if (typeof item === 'string')
                return fix([item])[0];
            if (Array.isArray(item)) {
                return item.map((val) => (val.startsWith('./') ? path_1.default.resolve(this.projectDir, val) : val));
            }
            const ret = {};
            for (const key of Object.keys(item)) {
                ret[key] = fix(item[key]);
            }
            return ret;
        };
        mainConfig.entry = fix(mainConfig.entry);
        return (0, webpack_merge_1.merge)({
            devtool: 'source-map',
            target: 'electron-main',
            mode: this.mode,
            output: {
                path: path_1.default.resolve(this.webpackDir, 'main'),
                filename: 'index.js',
                libraryTarget: 'commonjs2',
            },
            plugins: [new webpack_1.default.DefinePlugin(this.getDefines())],
            node: {
                __dirname: false,
                __filename: false,
            },
        }, mainConfig || {});
    }
    async getRendererConfig(entryPoints) {
        var _a, _b;
        const entryPointsForTarget = {
            web: [],
            electronRenderer: [],
            electronPreload: [],
            sandboxedPreload: [],
        };
        for (const entry of entryPoints) {
            const target = ((_a = entry.nodeIntegration) !== null && _a !== void 0 ? _a : this.pluginConfig.renderer.nodeIntegration) ? 'electronRenderer' : 'web';
            const preloadTarget = ((_b = entry.nodeIntegration) !== null && _b !== void 0 ? _b : this.pluginConfig.renderer.nodeIntegration) ? 'electronPreload' : 'sandboxedPreload';
            if ((0, rendererTypeUtils_1.isPreloadOnly)(entry)) {
                entryPointsForTarget[preloadTarget].push(entry);
            }
            else {
                entryPointsForTarget[target].push(entry);
                if ((0, rendererTypeUtils_1.isLocalWindow)(entry) && entry.preload) {
                    entryPointsForTarget[preloadTarget].push({ ...entry, preload: entry.preload });
                }
            }
        }
        const rendererConfigs = await Promise.all([
            await this.buildRendererConfigs(entryPointsForTarget.web, RendererTarget.Web),
            await this.buildRendererConfigs(entryPointsForTarget.electronRenderer, RendererTarget.ElectronRenderer),
            await this.buildRendererConfigs(entryPointsForTarget.electronPreload, RendererTarget.ElectronPreload),
            await this.buildRendererConfigs(entryPointsForTarget.sandboxedPreload, RendererTarget.SandboxedPreload),
        ].reduce((configs, allConfigs) => allConfigs.concat(configs)));
        return rendererConfigs.filter(isNotNull);
    }
    buildRendererBaseConfig(target) {
        return {
            target: rendererTargetToWebpackTarget(target),
            devtool: this.rendererSourceMapOption,
            mode: this.mode,
            output: {
                path: path_1.default.resolve(this.webpackDir, 'renderer'),
                filename: '[name]/index.js',
                globalObject: 'self',
                ...(this.isProd ? {} : { publicPath: '/' }),
            },
            node: {
                __dirname: false,
                __filename: false,
            },
            plugins: [new AssetRelocatorPatch_1.default(this.isProd, target === RendererTarget.ElectronRenderer || target === RendererTarget.ElectronPreload)],
        };
    }
    async buildRendererConfigForWebOrRendererTarget(entryPoints, target) {
        if (!(0, rendererTypeUtils_1.isLocalOrNoWindowEntries)(entryPoints)) {
            throw new Error('Invalid renderer entry point detected.');
        }
        const entry = {};
        const baseConfig = this.buildRendererBaseConfig(target);
        const rendererConfig = await this.resolveConfig(this.pluginConfig.renderer.config);
        const output = {
            path: path_1.default.resolve(this.webpackDir, 'renderer'),
            filename: '[name]/index.js',
            globalObject: 'self',
            ...(this.isProd ? {} : { publicPath: '/' }),
        };
        const plugins = [];
        for (const entryPoint of entryPoints) {
            entry[entryPoint.name] = (entryPoint.prefixedEntries || []).concat([entryPoint.js]);
            if ((0, rendererTypeUtils_1.isLocalWindow)(entryPoint)) {
                plugins.push(new html_webpack_plugin_1.default({
                    title: entryPoint.name,
                    template: entryPoint.html,
                    filename: `${entryPoint.name}/index.html`,
                    chunks: [entryPoint.name].concat(entryPoint.additionalChunks || []),
                }));
            }
        }
        return (0, webpack_merge_1.merge)(baseConfig, rendererConfig || {}, { entry, output, plugins });
    }
    async buildRendererConfigForPreloadOrSandboxedPreloadTarget(entryPoints, target) {
        var _a;
        if (entryPoints.length === 0) {
            return null;
        }
        const externals = ['electron', 'electron/renderer', 'electron/common', 'events', 'timers', 'url'];
        const entry = {};
        const baseConfig = this.buildRendererBaseConfig(target);
        const rendererConfig = await this.resolveConfig(((_a = entryPoints[0].preload) === null || _a === void 0 ? void 0 : _a.config) || this.pluginConfig.renderer.config);
        for (const entryPoint of entryPoints) {
            entry[entryPoint.name] = (entryPoint.prefixedEntries || []).concat([entryPoint.preload.js]);
        }
        const config = {
            target: rendererTargetToWebpackTarget(target),
            entry,
            output: {
                path: path_1.default.resolve(this.webpackDir, 'renderer'),
                filename: '[name]/preload.js',
                globalObject: 'self',
                ...(this.isProd ? {} : { publicPath: '/' }),
            },
            plugins: target === RendererTarget.ElectronPreload ? [] : [new webpack_1.default.ExternalsPlugin('commonjs2', externals)],
        };
        return (0, webpack_merge_1.merge)(baseConfig, rendererConfig || {}, config);
    }
    async buildRendererConfigs(entryPoints, target) {
        if (entryPoints.length === 0) {
            return [];
        }
        const rendererConfigs = [];
        if (target === RendererTarget.Web || target === RendererTarget.ElectronRenderer) {
            rendererConfigs.push(this.buildRendererConfigForWebOrRendererTarget(entryPoints, target));
            return rendererConfigs;
        }
        else if (target === RendererTarget.ElectronPreload || target === RendererTarget.SandboxedPreload) {
            if (!(0, rendererTypeUtils_1.isPreloadOnlyEntries)(entryPoints)) {
                throw new Error('Invalid renderer entry point detected.');
            }
            const entryPointsWithPreloadConfig = [], entryPointsWithoutPreloadConfig = [];
            entryPoints.forEach((entryPoint) => (entryPoint.preload.config ? entryPointsWithPreloadConfig : entryPointsWithoutPreloadConfig).push(entryPoint));
            rendererConfigs.push(this.buildRendererConfigForPreloadOrSandboxedPreloadTarget(entryPointsWithoutPreloadConfig, target));
            entryPointsWithPreloadConfig.forEach((entryPoint) => {
                rendererConfigs.push(this.buildRendererConfigForPreloadOrSandboxedPreloadTarget([entryPoint], target));
            });
            return rendererConfigs;
        }
        else {
            throw new Error('Invalid renderer entry point detected.');
        }
    }
}
exports.default = WebpackConfigGenerator;
//# sourceMappingURL=data:application/json;base64,