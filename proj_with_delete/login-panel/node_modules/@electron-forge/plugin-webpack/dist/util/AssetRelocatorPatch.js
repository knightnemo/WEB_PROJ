"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class AssetRelocatorPatch {
    constructor(isProd, nodeIntegration) {
        this.isProd = isProd;
        this.nodeIntegration = nodeIntegration;
    }
    injectedProductionDirnameCode() {
        if (this.nodeIntegration) {
            // In production the assets are found one directory up from
            // __dirname
            return 'require("path").resolve(__dirname, "..")';
        }
        // If nodeIntegration is disabled, we replace __dirname
        // with an empty string so no error is thrown at runtime
        return '""';
    }
    apply(compiler) {
        compiler.hooks.compilation.tap('asset-relocator-forge-patch', (compilation) => {
            // We intercept the Vercel loader code injection and replace __dirname with
            // code that works with Electron Forge
            //
            // Here is where the injection occurs:
            // https://github.com/vercel/webpack-asset-relocator-loader/blob/4710a018fc8fb64ad51efb368759616fb273618f/src/asset-relocator.js#L331-L339
            compilation.mainTemplate.hooks.requireExtensions.intercept({
                register: (tapInfo) => {
                    if (tapInfo.name === 'asset-relocator-loader') {
                        const originalFn = tapInfo.fn;
                        tapInfo.fn = (source, chunk) => {
                            const originalInjectCode = originalFn(source, chunk);
                            // Since this is not a public API of the Vercel loader, it could
                            // change on patch versions and break things.
                            //
                            // If the injected code changes substantially, we throw an error
                            if (!originalInjectCode.includes('__webpack_require__.ab = __dirname + ')) {
                                throw new Error('The installed version of @vercel/webpack-asset-relocator-loader does not appear to be compatible with Forge');
                            }
                            if (this.isProd) {
                                return originalInjectCode.replace('__dirname', this.injectedProductionDirnameCode());
                            }
                            return originalInjectCode.replace('__dirname', 
                            // In development, the app is loaded via webpack-dev-server
                            // so __dirname is useless because it points to Electron
                            // internal code. Instead we hard-code the absolute path to
                            // the webpack output.
                            JSON.stringify(compiler.options.output.path));
                        };
                    }
                    return tapInfo;
                },
            });
        });
    }
}
exports.default = AssetRelocatorPatch;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXNzZXRSZWxvY2F0b3JQYXRjaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL0Fzc2V0UmVsb2NhdG9yUGF0Y2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxNQUFxQixtQkFBbUI7SUFLdEMsWUFBWSxNQUFlLEVBQUUsZUFBd0I7UUFDbkQsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7SUFDekMsQ0FBQztJQUVPLDZCQUE2QjtRQUNuQyxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDeEIsMkRBQTJEO1lBQzNELFlBQVk7WUFDWixPQUFPLDBDQUEwQyxDQUFDO1NBQ25EO1FBRUQsdURBQXVEO1FBQ3ZELHdEQUF3RDtRQUN4RCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxLQUFLLENBQUMsUUFBa0I7UUFDN0IsUUFBUSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLDZCQUE2QixFQUFFLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDNUUsMkVBQTJFO1lBQzNFLHNDQUFzQztZQUN0QyxFQUFFO1lBQ0Ysc0NBQXNDO1lBQ3RDLDBJQUEwSTtZQUMxSSxXQUFXLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUM7Z0JBQ3pELFFBQVEsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFO29CQUNwQixJQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssd0JBQXdCLEVBQUU7d0JBQzdDLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxFQUE4QyxDQUFDO3dCQUUxRSxPQUFPLENBQUMsRUFBRSxHQUFHLENBQUMsTUFBYyxFQUFFLEtBQVksRUFBRSxFQUFFOzRCQUM1QyxNQUFNLGtCQUFrQixHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7NEJBRXJELGdFQUFnRTs0QkFDaEUsNkNBQTZDOzRCQUM3QyxFQUFFOzRCQUNGLGdFQUFnRTs0QkFDaEUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyx1Q0FBdUMsQ0FBQyxFQUFFO2dDQUN6RSxNQUFNLElBQUksS0FBSyxDQUFDLDZHQUE2RyxDQUFDLENBQUM7NkJBQ2hJOzRCQUVELElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQ0FDZixPQUFPLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLDZCQUE2QixFQUFFLENBQUMsQ0FBQzs2QkFDdEY7NEJBRUQsT0FBTyxrQkFBa0IsQ0FBQyxPQUFPLENBQy9CLFdBQVc7NEJBQ1gsMkRBQTJEOzRCQUMzRCx3REFBd0Q7NEJBQ3hELDJEQUEyRDs0QkFDM0Qsc0JBQXNCOzRCQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUM3QyxDQUFDO3dCQUNKLENBQUMsQ0FBQztxQkFDSDtvQkFFRCxPQUFPLE9BQU8sQ0FBQztnQkFDakIsQ0FBQzthQUNGLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBakVELHNDQWlFQyJ9